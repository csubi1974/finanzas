import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Cargar variables de entorno desde .env
dotenv.config();

// Configuraci√≥n de Supabase usando variables de entorno
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://vzduypgltddutfwgqahm.supabase.co';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ6ZHV5cGdsdGRkdXRmd2dxYWhtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYxNzM1MTgsImV4cCI6MjA3MTc0OTUxOH0.Z9RBwCcUPcYzmCmev745sgxc1qSNeimybb5960Id29o';

const supabase = createClient(supabaseUrl, supabaseKey);

/**
 * Script para verificar qu√© tablas existen en la base de datos de Supabase
 * y diagnosticar el problema del user_balance
 */

async function verifyDatabaseTables() {
  console.log('üîç Verificando tablas en la base de datos...');
  console.log('üîó URL:', supabaseUrl);
  
  try {
    // Verificar tabla transactions
    console.log('\nüìä Verificando tabla transactions...');
    const { data: transactionsData, error: transactionsError } = await supabase
      .from('transactions')
      .select('count', { count: 'exact', head: true });
    
    if (transactionsError) {
      console.error('‚ùå Error en tabla transactions:', transactionsError.message);
    } else {
      console.log('‚úÖ Tabla transactions existe - Total registros:', transactionsData);
    }

    // Verificar tabla user_balance
    console.log('\nüí∞ Verificando tabla user_balance...');
    const { data: balanceData, error: balanceError } = await supabase
      .from('user_balance')
      .select('count', { count: 'exact', head: true });
    
    if (balanceError) {
      console.error('‚ùå Error en tabla user_balance:', balanceError.message);
      console.log('üîß La tabla user_balance no existe o no es accesible');
    } else {
      console.log('‚úÖ Tabla user_balance existe - Total registros:', balanceData);
    }

    // Verificar tabla savings_goals
    console.log('\nüéØ Verificando tabla savings_goals...');
    const { data: goalsData, error: goalsError } = await supabase
      .from('savings_goals')
      .select('count', { count: 'exact', head: true });
    
    if (goalsError) {
      console.error('‚ùå Error en tabla savings_goals:', goalsError.message);
    } else {
      console.log('‚úÖ Tabla savings_goals existe - Total registros:', goalsData);
    }

    // Verificar tabla custom_categories
    console.log('\nüè∑Ô∏è Verificando tabla custom_categories...');
    const { data: categoriesData, error: categoriesError } = await supabase
      .from('custom_categories')
      .select('count', { count: 'exact', head: true });
    
    if (categoriesError) {
      console.error('‚ùå Error en tabla custom_categories:', categoriesError.message);
    } else {
      console.log('‚úÖ Tabla custom_categories existe - Total registros:', categoriesData);
    }

    // Si user_balance no existe, mostrar instrucciones
    if (balanceError) {
      console.log('\nüö® PROBLEMA DETECTADO:');
      console.log('La tabla user_balance no existe en la base de datos.');
      console.log('\nüìã SOLUCIONES:');
      console.log('1. Ejecutar el archivo database_schema.sql en Supabase SQL Editor');
      console.log('2. Verificar que todas las tablas se crearon correctamente');
      console.log('3. Ejecutar fix_trigger.sql si es necesario');
      console.log('\nüîó Accede a: https://supabase.com/dashboard/project/vzduypgltddutfwgqahm/sql');
    }

  } catch (error) {
    console.error('üí• Error general:', error.message);
  }
}

// Funci√≥n para verificar el balance actual calculado vs almacenado
async function compareBalances(userId) {
  if (!userId) {
    console.log('‚ùå Se requiere un userId para comparar balances');
    return;
  }

  try {
    console.log('\nüîÑ Comparando balances...');
    
    // Obtener transacciones y calcular balance
    const { data: transactions, error: transError } = await supabase
      .from('transactions')
      .select('type, amount')
      .eq('user_id', userId);
    
    if (transError) {
      console.error('‚ùå Error obteniendo transacciones:', transError.message);
      return;
    }

    const calculatedBalance = transactions.reduce((sum, t) => {
      return sum + (t.type === 'income' ? parseFloat(t.amount) : -parseFloat(t.amount));
    }, 0);

    console.log('üí∞ Balance calculado desde transacciones:', calculatedBalance);

    // Intentar obtener balance almacenado
    const { data: storedBalance, error: balanceError } = await supabase
      .from('user_balance')
      .select('balance')
      .eq('user_id', userId)
      .single();

    if (balanceError) {
      console.log('‚ùå No se pudo obtener balance almacenado:', balanceError.message);
    } else {
      console.log('üè¶ Balance almacenado en user_balance:', storedBalance.balance);
      
      const difference = Math.abs(calculatedBalance - parseFloat(storedBalance.balance));
      if (difference > 0.01) {
        console.log('‚ö†Ô∏è DISCREPANCIA DETECTADA:', difference);
      } else {
        console.log('‚úÖ Los balances coinciden');
      }
    }

  } catch (error) {
    console.error('üí• Error comparando balances:', error.message);
  }
}

// Ejecutar verificaci√≥n
verifyDatabaseTables();

// Exportar funciones para uso manual
export { verifyDatabaseTables, compareBalances };